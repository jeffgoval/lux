const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

function loadEnv() {
  try {
    const envPath = path.join(__dirname, '.env');
    const envContent = fs.readFileSync(envPath, 'utf8');
    const envVars = {};
    
    envContent.split('\n').forEach(line => {
      const trimmedLine = line.trim();
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const equalIndex = trimmedLine.indexOf('=');
        if (equalIndex > 0) {
          const key = trimmedLine.substring(0, equalIndex).trim();
          const value = trimmedLine.substring(equalIndex + 1).trim().replace(/^["']|["']$/g, '');
          envVars[key] = value;
        }
      }
    });
    
    return envVars;
  } catch (error) {
    console.error('Erro ao ler arquivo .env:', error.message);
    return {};
  }
}

const env = loadEnv();
const supabase = createClient(env.VITE_SUPABASE_URL, env.VITE_SUPABASE_ANON_KEY);

async function checkCurrentPolicies() {
  console.log('üîç Verificando pol√≠ticas RLS atuais...\n');

  try {
    // Tentar verificar as tabelas diretamente
    const { data: profilesData, error: profilesError } = await supabase
      .from('profiles')
      .select('id, user_id, primeiro_acesso')
      .limit(1);

    if (profilesError) {
      console.log('‚ùå Tabela profiles:', profilesError.message);
    } else {
      console.log('‚úÖ Tabela profiles acess√≠vel');
      console.log('üìä Estrutura verificada');
    }

    // Verificar user_roles
    const { data: rolesData, error: rolesError } = await supabase
      .from('user_roles')
      .select('id, user_id, role')
      .limit(1);

    if (rolesError) {
      console.log('‚ùå Tabela user_roles:', rolesError.message);
    } else {
      console.log('‚úÖ Tabela user_roles acess√≠vel');
    }

    // Verificar clinicas
    const { data: clinicasData, error: clinicasError } = await supabase
      .from('clinicas')
      .select('id, nome')
      .limit(1);

    if (clinicasError) {
      console.log('‚ùå Tabela clinicas:', clinicasError.message);
    } else {
      console.log('‚úÖ Tabela clinicas acess√≠vel');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

async function testOnboardingRestrictions() {
  console.log('\nüß™ Testando restri√ß√µes de onboarding...\n');

  // Criar usu√°rio de teste
  const testEmail = `test-${Date.now()}@example.com`;
  const testPassword = 'test123456';

  console.log('1. Criando usu√°rio de teste...');
  const { data: authData, error: signUpError } = await supabase.auth.signUp({
    email: testEmail,
    password: testPassword
  });

  if (signUpError) {
    console.error('‚ùå Erro ao criar usu√°rio:', signUpError.message);
    return;
  }

  const userId = authData.user?.id;
  if (!userId) {
    console.error('‚ùå Usu√°rio n√£o foi criado');
    return;
  }

  console.log(`‚úÖ Usu√°rio criado: ${testEmail}`);

  // Fazer login
  console.log('\n2. Fazendo login...');
  const { error: signInError } = await supabase.auth.signInWithPassword({
    email: testEmail,
    password: testPassword
  });

  if (signInError) {
    console.error('‚ùå Erro no login:', signInError.message);
    return;
  }

  console.log('‚úÖ Login realizado');

  // Tentar criar profile com primeiro_acesso = true
  console.log('\n3. Testando cria√ß√£o de profile...');
  const { data: profileData, error: profileError } = await supabase
    .from('profiles')
    .insert({
      user_id: userId,
      email: testEmail,
      nome_completo: 'Teste Usu√°rio',
      primeiro_acesso: true
    })
    .select()
    .single();

  if (profileError) {
    console.error('‚ùå Erro ao criar profile:', profileError.message);
    return;
  }

  console.log('‚úÖ Profile criado com primeiro_acesso = true');

  // Tentar acessar user_roles (DEVE falhar)
  console.log('\n4. Testando acesso a user_roles (deve falhar)...');
  const { data: rolesData, error: rolesError } = await supabase
    .from('user_roles')
    .select('*')
    .eq('user_id', userId);

  if (rolesError) {
    console.log('üîí ‚úÖ CORRETO: Acesso a user_roles bloqueado!');
    console.log(`   Erro: ${rolesError.message}`);
  } else {
    console.log('‚ö†Ô∏è  PROBLEMA: Acesso a user_roles N√ÉO foi bloqueado!');
    console.log(`   Roles encontradas: ${rolesData.length}`);
  }

  // Criar role (deve conseguir durante onboarding)
  console.log('\n5. Testando cria√ß√£o de role...');
  const { data: newRoleData, error: newRoleError } = await supabase
    .from('user_roles')
    .insert({
      user_id: userId,
      role: 'proprietaria',
      ativo: true,
      criado_por: userId
    });

  if (newRoleError) {
    console.log('‚ùå Erro ao criar role:', newRoleError.message);
  } else {
    console.log('‚úÖ Role criada durante onboarding');
  }

  // Marcar onboarding como completo
  console.log('\n6. Marcando onboarding como completo...');
  const { error: updateError } = await supabase
    .from('profiles')
    .update({ primeiro_acesso: false })
    .eq('user_id', userId);

  if (updateError) {
    console.error('‚ùå Erro ao completar onboarding:', updateError.message);
    return;
  }

  console.log('‚úÖ Onboarding marcado como completo');

  // Tentar acessar roles novamente (agora deve funcionar)
  console.log('\n7. Testando acesso a user_roles ap√≥s onboarding...');
  const { data: rolesAfter, error: rolesAfterError } = await supabase
    .from('user_roles')
    .select('*')
    .eq('user_id', userId);

  if (rolesAfterError) {
    console.log('‚ùå PROBLEMA: Ainda n√£o consegue acessar roles ap√≥s onboarding');
    console.log(`   Erro: ${rolesAfterError.message}`);
  } else {
    console.log('‚úÖ CORRETO: Acesso liberado ap√≥s onboarding completo!');
    console.log(`   Roles encontradas: ${rolesAfter.length}`);
  }

  // Cleanup
  console.log('\n8. Limpando dados de teste...');
  await supabase.from('profiles').delete().eq('user_id', userId);

  console.log('\nüìã RESUMO DO TESTE:');
  console.log('- ‚úÖ Cria√ß√£o de usu√°rio funcionando');
  console.log('- ‚úÖ Cria√ß√£o de profile funcionando');
  console.log(rolesError ? '- ‚úÖ RLS bloqueando acesso durante onboarding' : '- ‚ùå RLS N√ÉO est√° bloqueando onboarding');
  console.log(!newRoleError ? '- ‚úÖ Cria√ß√£o de role permitida durante onboarding' : '- ‚ùå Cria√ß√£o de role bloqueada');
  console.log(!updateError ? '- ‚úÖ Marca√ß√£o de onboarding completo funcionando' : '- ‚ùå N√£o consegue marcar onboarding completo');
  console.log(!rolesAfterError ? '- ‚úÖ Acesso liberado ap√≥s onboarding' : '- ‚ùå Acesso ainda bloqueado ap√≥s onboarding');
}

async function main() {
  console.log('üöÄ Verificando implementa√ß√£o de RLS para onboarding...\n');
  
  await checkCurrentPolicies();
  await testOnboardingRestrictions();
  
  console.log('\nüéØ PR√ìXIMOS PASSOS:');
  console.log('1. Se RLS n√£o est√° funcionando, execute as pol√≠ticas manualmente no Supabase SQL Editor');
  console.log('2. Use o arquivo: onboarding-rls-policies.sql');
  console.log('3. Teste novamente com um novo usu√°rio no frontend');
}

main().catch(console.error);