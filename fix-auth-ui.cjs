const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function diagnoseAuthUI() {
  console.log('üîç DIAGNOSTICANDO PROBLEMA DA UI DO AUTH');
  console.log('='.repeat(60));
  
  try {
    // Verificar se conseguimos acessar dados b√°sicos da auth
    console.log('\n1. TESTANDO ACESSO √Ä AUTH:');
    console.log('-'.repeat(40));
    
    try {
      const { data: session } = await supabase.auth.getSession();
      console.log('‚úÖ Conseguimos acessar sess√£o auth');
    } catch (e) {
      console.log('‚ùå Erro ao acessar sess√£o:', e.message);
    }
    
    // Tentar verificar se h√° usu√°rios usando uma abordagem indireta
    console.log('\n2. VERIFICANDO RELA√á√ÉO COM PROFILES:');
    console.log('-'.repeat(40));
    
    try {
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('user_id')
        .limit(5);
        
      if (error) {
        console.log('‚ùå Erro ao buscar profiles:', error.message);
      } else {
        console.log('‚úÖ Profiles encontrados:', profiles.length);
        if (profiles.length > 0) {
          console.log('üìã User IDs nos profiles:');
          profiles.forEach((p, i) => {
            console.log(`  ${i + 1}. ${p.user_id}`);
          });
        }
      }
    } catch (e) {
      console.log('‚ùå Erro geral ao buscar profiles:', e.message);
    }
    
    console.log('\n3. COMANDOS SQL PARA EXECUTAR NO DASHBOARD:');
    console.log('-'.repeat(60));
    console.log('Copy/paste estes comandos no SQL Editor do Supabase:');
    console.log('');
    
    console.log('-- Verificar estrutura da tabela auth.users');
    console.log('SELECT column_name, data_type, is_nullable');
    console.log('FROM information_schema.columns');
    console.log("WHERE table_schema = 'auth' AND table_name = 'users'");
    console.log('ORDER BY ordinal_position;');
    console.log('');
    
    console.log('-- Contar usu√°rios existentes');
    console.log('SELECT COUNT(*) as total_usuarios FROM auth.users;');
    console.log('');
    
    console.log('-- Ver alguns usu√°rios (se existirem)');
    console.log('SELECT id, email, created_at FROM auth.users ORDER BY created_at DESC LIMIT 5;');
    console.log('');
    
    console.log('-- Verificar se h√° problemas de constraint');
    console.log('SELECT conname, contype FROM pg_constraint');
    console.log("WHERE conrelid = 'auth.users'::regclass;");
    console.log('');
    
    console.log('4. POSS√çVEIS SOLU√á√ïES:');
    console.log('-'.repeat(40));
    console.log('');
    
    console.log('üîß SOLU√á√ÉO A - Refresh da interface:');
    console.log('1. Feche todas as abas do Supabase');
    console.log('2. Limpe o cache do browser (Ctrl+Shift+Delete)');
    console.log('3. Acesse o dashboard em modo inc√≥gnito');
    console.log('4. V√° para Auth > Users');
    console.log('');
    
    console.log('üîß SOLU√á√ÉO B - Se o problema persistir:');
    console.log('Execute no SQL Editor:');
    console.log('-- VACUUM ANALYZE auth.users;');
    console.log('-- REINDEX TABLE auth.users;');
    console.log('');
    
    console.log('üîß SOLU√á√ÉO C - Reset da view (√∫ltimo recurso):');
    console.log('-- SELECT pg_reload_conf();');
    console.log('');
    
    console.log('üîß SOLU√á√ÉO D - Deletar via SQL se necess√°rio:');
    console.log('-- DELETE FROM auth.users; (CUIDADO!)');
    console.log('');
    
    console.log('5. WORKAROUND TEMPOR√ÅRIO:');
    console.log('-'.repeat(40));
    console.log('Se precisar deletar usu√°rios urgentemente:');
    console.log('1. Use o SQL Editor: DELETE FROM auth.users WHERE email LIKE \'%pattern%\';');
    console.log('2. Ou delete um por vez na interface manualmente');
    
  } catch (err) {
    console.error('‚ùå Erro geral:', err.message);
  }
}

diagnoseAuthUI();