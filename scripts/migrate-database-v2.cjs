#!/usr/bin/env node

/**
 * üóÑÔ∏è MIGRA√á√ÉO DO BANCO DE DADOS - SISTEMA V2
 * 
 * Executa a migra√ß√£o completa para o sistema de autentica√ß√£o seguro
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de ter:');
  console.log('- VITE_SUPABASE_URL');
  console.log('- SUPABASE_SERVICE_ROLE_KEY (ou VITE_SUPABASE_ANON_KEY)');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

console.log('üóÑÔ∏è MIGRA√á√ÉO DO BANCO DE DADOS - SISTEMA V2\n');

// ============================================================================
// FUN√á√ïES UTILIT√ÅRIAS
// ============================================================================

async function executeSQLFile(filePath, description) {
  console.log(`üìÑ Executando: ${description}...`);
  
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`  ‚ùå Arquivo n√£o encontrado: ${filePath}`);
      return false;
    }
    
    const sqlContent = fs.readFileSync(filePath, 'utf8');
    
    // Dividir em statements individuais (separados por ;)
    const statements = sqlContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'));
    
    console.log(`  üìä ${statements.length} statements encontrados`);
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      
      if (statement.length < 10) continue; // Pular statements muito pequenos
      
      try {
        const { error } = await supabase.rpc('exec_sql', { 
          sql_query: statement + ';' 
        });
        
        if (error) {
          // Tentar execu√ß√£o direta se RPC falhar
          const { error: directError } = await supabase
            .from('_temp_migration')
            .select('*')
            .limit(1);
          
          if (directError && directError.message.includes('does not exist')) {
            // Criar fun√ß√£o tempor√°ria para execu√ß√£o
            await createTempExecutionFunction();
          }
          
          console.log(`  ‚ö†Ô∏è Statement ${i + 1}: ${error.message.substring(0, 100)}...`);
          errorCount++;
        } else {
          successCount++;
        }
        
      } catch (err) {
        console.log(`  ‚ùå Erro no statement ${i + 1}: ${err.message.substring(0, 100)}...`);
        errorCount++;
      }
    }
    
    console.log(`  ‚úÖ Conclu√≠do: ${successCount} sucessos, ${errorCount} erros\n`);
    return errorCount === 0;
    
  } catch (error) {
    console.log(`  ‚ùå Erro ao executar arquivo: ${error.message}\n`);
    return false;
  }
}

async function createTempExecutionFunction() {
  try {
    const { error } = await supabase.rpc('exec_sql', {
      sql_query: `
        CREATE OR REPLACE FUNCTION exec_sql(sql_query text)
        RETURNS void
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $$
        BEGIN
          EXECUTE sql_query;
        END;
        $$;
      `
    });
    
    if (error) {
      console.log('  ‚ÑπÔ∏è Fun√ß√£o de execu√ß√£o n√£o dispon√≠vel, usando m√©todo alternativo');
    }
  } catch (err) {
    // Ignorar erro - tentaremos m√©todo alternativo
  }
}

async function checkConnection() {
  console.log('üîç Verificando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .limit(1);
    
    if (error) {
      console.log(`  ‚ùå Erro de conex√£o: ${error.message}`);
      return false;
    }
    
    console.log('  ‚úÖ Conex√£o estabelecida com sucesso\n');
    return true;
    
  } catch (err) {
    console.log(`  ‚ùå Erro de conex√£o: ${err.message}`);
    return false;
  }
}

async function backupCurrentSchema() {
  console.log('üíæ Fazendo backup do schema atual...');
  
  try {
    // Listar tabelas existentes
    const { data: tables, error } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .neq('table_name', 'spatial_ref_sys'); // Excluir tabelas do sistema
    
    if (error) {
      console.log(`  ‚ö†Ô∏è N√£o foi poss√≠vel listar tabelas: ${error.message}`);
    } else {
      const tableNames = tables.map(t => t.table_name);
      console.log(`  üìä ${tableNames.length} tabelas encontradas: ${tableNames.slice(0, 5).join(', ')}${tableNames.length > 5 ? '...' : ''}`);
      
      // Salvar lista de tabelas
      const backupInfo = {
        timestamp: new Date().toISOString(),
        tables: tableNames,
        supabaseUrl: supabaseUrl
      };
      
      const backupPath = path.join(process.cwd(), 'backups', `schema-backup-${Date.now()}.json`);
      
      // Criar diret√≥rio de backup se n√£o existir
      const backupDir = path.dirname(backupPath);
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      fs.writeFileSync(backupPath, JSON.stringify(backupInfo, null, 2));
      console.log(`  ‚úÖ Backup salvo em: ${backupPath}\n`);
    }
    
  } catch (err) {
    console.log(`  ‚ö†Ô∏è Erro no backup: ${err.message}\n`);
  }
}

// ============================================================================
// MIGRA√á√ÉO PRINCIPAL
// ============================================================================

async function runMigration() {
  console.log('üöÄ Iniciando migra√ß√£o do banco de dados...\n');
  
  // 1. Verificar conex√£o
  const connected = await checkConnection();
  if (!connected) {
    console.log('‚ùå N√£o foi poss√≠vel conectar ao banco. Verifique as credenciais.');
    process.exit(1);
  }
  
  // 2. Fazer backup
  await backupCurrentSchema();
  
  // 3. Executar migra√ß√£o do schema
  const schemaSuccess = await executeSQLFile(
    path.join(process.cwd(), 'database/secure-auth-schema.sql'),
    'Schema de autentica√ß√£o seguro'
  );
  
  // 4. Aplicar pol√≠ticas RLS
  const rlsSuccess = await executeSQLFile(
    path.join(process.cwd(), 'database/secure-rls-policies.sql'),
    'Pol√≠ticas RLS rigorosas'
  );
  
  // 5. Migrar dados existentes
  const dataSuccess = await executeSQLFile(
    path.join(process.cwd(), 'database/migrate-existing-data.sql'),
    'Migra√ß√£o de dados existentes'
  );
  
  // ============================================================================
  // RESUMO FINAL
  // ============================================================================
  
  console.log('='.repeat(60));
  console.log('üìã RESUMO DA MIGRA√á√ÉO');
  console.log('='.repeat(60));
  
  console.log(`üóÑÔ∏è Schema: ${schemaSuccess ? '‚úÖ Sucesso' : '‚ùå Falhou'}`);
  console.log(`üîí RLS Policies: ${rlsSuccess ? '‚úÖ Sucesso' : '‚ùå Falhou'}`);
  console.log(`üìä Migra√ß√£o de Dados: ${dataSuccess ? '‚úÖ Sucesso' : '‚ùå Falhou'}`);
  
  const allSuccess = schemaSuccess && rlsSuccess && dataSuccess;
  
  if (allSuccess) {
    console.log('\nüéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('\nPr√≥ximos passos:');
    console.log('1. Configurar vari√°veis de ambiente JWT');
    console.log('2. Testar login com credenciais v√°lidas');
    console.log('3. Verificar isolamento multi-tenant');
  } else {
    console.log('\n‚ö†Ô∏è MIGRA√á√ÉO PARCIALMENTE CONCLU√çDA');
    console.log('\nVerifique os erros acima e execute novamente se necess√°rio.');
    console.log('O backup foi salvo em caso de necessidade de rollback.');
  }
  
  console.log('\nüìö Documenta√ß√£o: MIGRATION_PLAN.md');
}

// Executar migra√ß√£o
runMigration().catch(console.error);
