const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://shzbgjooydruspqajjkf.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNoemJnam9veWRydXNwcWFqamtmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc3OTY4ODcsImV4cCI6MjA3MzM3Mjg4N30.yJGgiGL0PmbakvtbNh9P5cWDKyESIkTzUCX9rRiVpKw';

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function debugFinalFlow() {
  console.log('üîç DEBUG FINAL - SIMULANDO FLUXO COMPLETO...\n');

  try {
    // 1. Criar usu√°rio e simular onboarding completo
    const timestamp = Date.now();
    const testEmail = `final-test-${timestamp}@exemplo.com`;
    const testPassword = '123456';
    
    console.log('1. Criando usu√°rio...');
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: testEmail,
      password: testPassword,
      options: {
        data: {
          nome_completo: 'Usu√°rio Final Test'
        }
      }
    });

    if (authError || !authData.user) {
      console.log('‚ùå Erro ao criar usu√°rio:', authError?.message);
      return;
    }

    console.log('‚úÖ Usu√°rio criado:', authData.user.id);
    
    // 2. Aguardar trigger
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // 3. Verificar profile inicial
    const { data: initialProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', authData.user.id)
      .single();

    console.log('\n2. Profile inicial:');
    console.log(`   primeiro_acesso: ${initialProfile?.primeiro_acesso}`);
    console.log(`   nome: ${initialProfile?.nome_completo}`);

    // 4. Simular finaliza√ß√£o do onboarding (o que o OnboardingWizard faz)
    console.log('\n3. Simulando finaliza√ß√£o do onboarding...');
    
    const { data: updateResult, error: updateError } = await supabase
      .from('profiles')
      .update({ primeiro_acesso: false })
      .eq('id', authData.user.id)
      .select();

    if (updateError) {
      console.log('‚ùå Erro ao finalizar onboarding:', updateError.message);
      return;
    }

    console.log('‚úÖ Onboarding finalizado:', updateResult[0]);

    // 5. Fazer login para simular o contexto
    console.log('\n4. Fazendo login...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: testEmail,
      password: testPassword
    });

    if (loginError) {
      console.log('‚ùå Erro no login:', loginError.message);
      return;
    }

    console.log('‚úÖ Login realizado');

    // 6. Verificar dados ap√≥s login (o que o contexto veria)
    console.log('\n5. Verificando dados ap√≥s login...');
    
    const { data: profileAfterLogin } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', authData.user.id)
      .single();

    const { data: rolesAfterLogin } = await supabase
      .from('user_roles')
      .select('*')
      .eq('user_id', authData.user.id)
      .eq('ativo', true);

    console.log('üìä Estado que o contexto deveria ter:');
    console.log(`   user: ${!!loginData.user}`);
    console.log(`   profile: ${!!profileAfterLogin}`);
    console.log(`   profile.primeiro_acesso: ${profileAfterLogin?.primeiro_acesso}`);
    console.log(`   roles: ${rolesAfterLogin?.length || 0}`);

    // 7. Simular decis√£o do SecureAuthGuard
    console.log('\n6. Simulando SecureAuthGuard...');
    
    const needsOnboarding = loginData.user && profileAfterLogin?.primeiro_acesso === true;
    console.log(`   needsOnboarding: ${needsOnboarding}`);
    
    if (needsOnboarding) {
      console.log('‚ùå PROBLEMA: Guard ainda considera que precisa onboarding');
      console.log('üéØ CAUSA: primeiro_acesso ainda √© true OU contexto n√£o atualizou');
    } else {
      console.log('‚úÖ Guard deveria permitir acesso ao dashboard');
    }

    // 8. Verificar se h√° problema de timing
    console.log('\n7. Testando timing...');
    
    // Simular delay que pode acontecer no contexto
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const { data: profileDelayed } = await supabase
      .from('profiles')
      .select('primeiro_acesso')
      .eq('id', authData.user.id)
      .single();

    console.log(`   primeiro_acesso ap√≥s delay: ${profileDelayed?.primeiro_acesso}`);

    // 9. Limpar
    await supabase.auth.signOut();

    console.log('\nüéØ DIAGN√ìSTICO FINAL:');
    
    if (profileAfterLogin?.primeiro_acesso === false) {
      console.log('‚úÖ Banco de dados est√° correto');
      console.log('ü§î Problema pode estar em:');
      console.log('1. Contexto React n√£o est√° sendo atualizado');
      console.log('2. SecureAuthGuard est√° usando dados em cache');
      console.log('3. H√° race condition entre atualiza√ß√£o e navega√ß√£o');
      console.log('4. SecureAuth.tsx ainda tem l√≥gica problem√°tica');
      
      console.log('\nüí° SOLU√á√ïES POSS√çVEIS:');
      console.log('1. For√ßar reload completo da p√°gina ap√≥s onboarding');
      console.log('2. Usar navigate() em vez de window.location.href');
      console.log('3. Adicionar delay maior antes da navega√ß√£o');
      console.log('4. Implementar verifica√ß√£o em loop at√© contexto atualizar');
    } else {
      console.log('‚ùå Problema no banco de dados - primeiro_acesso n√£o foi atualizado');
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

debugFinalFlow();
