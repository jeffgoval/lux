#!/usr/bin/env node

/**
 * üß™ CRIAR DADOS M√çNIMOS DE TESTE
 * 
 * Cria dados usando apenas campos conhecidos
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

console.log('üß™ CRIANDO DADOS M√çNIMOS DE TESTE\n');

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// ============================================================================
// DADOS M√çNIMOS (apenas campos que sabemos que existem)
// ============================================================================

const MINIMAL_DATA = {
  clinics: [
    {
      nome: 'Bella Est√©tica',
      ativo: true
    }
  ],
  users: [
    {
      email: 'admin@teste.com',
      telefone: '11999999999',
      ativo: true
    }
  ]
};

// ============================================================================
// INSTRU√á√ïES PARA CRIA√á√ÉO MANUAL
// ============================================================================

function showManualInstructions() {
  console.log('üìã INSTRU√á√ïES PARA CRIA√á√ÉO MANUAL NO DASHBOARD\n');
  
  console.log('üîó Acesse: https://supabase.com/dashboard/project/shzbgjooydruspqajjkf');
  console.log('üìä V√° para: Table Editor\n');
  
  console.log('üè¢ 1. CRIAR CL√çNICA:');
  console.log('   Tabela: clinicas');
  console.log('   Dados:');
  console.log('   - nome: "Cl√≠nica Teste V2"');
  console.log('   - ativo: true');
  console.log('   - (outros campos ser√£o preenchidos automaticamente)\n');
  
  console.log('üë§ 2. CRIAR USU√ÅRIO:');
  console.log('   Tabela: profiles');
  console.log('   Dados:');
  console.log('   - email: "admin@teste.com"');
  console.log('   - telefone: "11999999999"');
  console.log('   - ativo: true');
  console.log('   - (outros campos ser√£o preenchidos automaticamente)\n');
  
  console.log('üë• 3. CRIAR ROLE:');
  console.log('   Tabela: user_roles');
  console.log('   Dados:');
  console.log('   - user_id: [ID do usu√°rio criado]');
  console.log('   - clinica_id: [ID da cl√≠nica criada]');
  console.log('   - role: "admin"');
  console.log('   - ativo: true\n');
  
  console.log('üîë 4. CREDENCIAIS DE TESTE:');
  console.log('   Email: admin@teste.com');
  console.log('   Senha: 123456 (qualquer senha > 3 caracteres)\n');
}

// ============================================================================
// TENTAR CRIA√á√ÉO AUTOM√ÅTICA (pode falhar por RLS)
// ============================================================================

async function tryAutomaticCreation() {
  console.log('ü§ñ Tentando cria√ß√£o autom√°tica...\n');
  
  let success = false;
  
  // Tentar criar cl√≠nica
  console.log('üè¢ Tentando criar cl√≠nica...');
  try {
    const { data, error } = await supabase
      .from('clinicas')
      .insert(MINIMAL_DATA.clinics[0])
      .select()
      .single();
    
    if (error) {
      console.log(`  ‚ùå Falhou: ${error.message}`);
    } else {
      console.log(`  ‚úÖ Cl√≠nica criada: ${data.id}`);
      success = true;
    }
  } catch (err) {
    console.log(`  ‚ùå Erro: ${err.message}`);
  }
  
  // Tentar criar usu√°rio
  console.log('\nüë§ Tentando criar usu√°rio...');
  try {
    const { data, error } = await supabase
      .from('profiles')
      .insert(MINIMAL_DATA.users[0])
      .select()
      .single();
    
    if (error) {
      console.log(`  ‚ùå Falhou: ${error.message}`);
    } else {
      console.log(`  ‚úÖ Usu√°rio criado: ${data.id}`);
      success = true;
    }
  } catch (err) {
    console.log(`  ‚ùå Erro: ${err.message}`);
  }
  
  return success;
}

// ============================================================================
// VERIFICAR SE J√Å EXISTEM DADOS
// ============================================================================

async function checkForExistingData() {
  console.log('üîç Verificando dados existentes...\n');
  
  let hasData = false;
  
  try {
    const { data: clinics } = await supabase
      .from('clinicas')
      .select('id, nome')
      .limit(5);
    
    if (clinics && clinics.length > 0) {
      console.log(`üè¢ ${clinics.length} cl√≠nicas encontradas:`);
      clinics.forEach(clinic => console.log(`   - ${clinic.nome} (${clinic.id})`));
      hasData = true;
    } else {
      console.log('üè¢ Nenhuma cl√≠nica encontrada');
    }
  } catch (err) {
    console.log(`‚ùå Erro ao verificar cl√≠nicas: ${err.message}`);
  }
  
  try {
    const { data: users } = await supabase
      .from('profiles')
      .select('id, email')
      .limit(5);
    
    if (users && users.length > 0) {
      console.log(`\nüë§ ${users.length} usu√°rios encontrados:`);
      users.forEach(user => console.log(`   - ${user.email} (${user.id})`));
      hasData = true;
    } else {
      console.log('\nüë§ Nenhum usu√°rio encontrado');
    }
  } catch (err) {
    console.log(`‚ùå Erro ao verificar usu√°rios: ${err.message}`);
  }
  
  try {
    const { data: roles } = await supabase
      .from('user_roles')
      .select('id, role')
      .limit(5);
    
    if (roles && roles.length > 0) {
      console.log(`\nüë• ${roles.length} roles encontrados:`);
      roles.forEach(role => console.log(`   - ${role.role} (${role.id})`));
      hasData = true;
    } else {
      console.log('\nüë• Nenhum role encontrado');
    }
  } catch (err) {
    console.log(`‚ùå Erro ao verificar roles: ${err.message}`);
  }
  
  return hasData;
}

// ============================================================================
// GERAR SQL PARA EXECU√á√ÉO MANUAL
// ============================================================================

function generateSQL() {
  console.log('\nüìù SQL PARA EXECU√á√ÉO MANUAL:\n');
  
  console.log('-- 1. Criar cl√≠nica');
  console.log(`INSERT INTO clinicas (nome, ativo) VALUES ('Cl√≠nica Teste V2', true);`);
  console.log('');
  
  console.log('-- 2. Criar usu√°rio');
  console.log(`INSERT INTO profiles (email, telefone, ativo) VALUES ('admin@teste.com', '11999999999', true);`);
  console.log('');
  
  console.log('-- 3. Criar role (substitua os UUIDs pelos IDs reais)');
  console.log(`INSERT INTO user_roles (user_id, clinica_id, role, ativo) `);
  console.log(`VALUES (`);
  console.log(`  (SELECT id FROM profiles WHERE email = 'admin@teste.com'),`);
  console.log(`  (SELECT id FROM clinicas WHERE nome = 'Cl√≠nica Teste V2'),`);
  console.log(`  'admin',`);
  console.log(`  true`);
  console.log(`);`);
  console.log('');
  
  console.log('-- 4. Verificar dados criados');
  console.log(`SELECT 'Cl√≠nicas' as tipo, nome as nome, id FROM clinicas`);
  console.log(`UNION ALL`);
  console.log(`SELECT 'Usu√°rios' as tipo, email as nome, id FROM profiles`);
  console.log(`UNION ALL`);
  console.log(`SELECT 'Roles' as tipo, role as nome, id FROM user_roles;`);
}

// ============================================================================
// MAIN
// ============================================================================

async function main() {
  // 1. Verificar dados existentes
  const hasExistingData = await checkForExistingData();
  
  if (hasExistingData) {
    console.log('\nüéâ DADOS J√Å EXISTEM!');
    console.log('\nPr√≥ximos passos:');
    console.log('1. Testar login na aplica√ß√£o');
    console.log('2. Usar credenciais existentes');
    console.log('3. Verificar funcionamento do sistema');
    return;
  }
  
  // 2. Tentar cria√ß√£o autom√°tica
  const automaticSuccess = await tryAutomaticCreation();
  
  if (automaticSuccess) {
    console.log('\nüéâ ALGUNS DADOS CRIADOS AUTOMATICAMENTE!');
    console.log('Complete a cria√ß√£o manualmente se necess√°rio.');
  } else {
    console.log('\n‚ö†Ô∏è CRIA√á√ÉO AUTOM√ÅTICA FALHOU (RLS ativo)');
  }
  
  // 3. Mostrar instru√ß√µes manuais
  console.log('\n' + '='.repeat(60));
  showManualInstructions();
  
  // 4. Gerar SQL
  generateSQL();
  
  console.log('='.repeat(60));
  console.log('üí° RESUMO:');
  console.log('1. Use o dashboard do Supabase para criar dados');
  console.log('2. Ou execute o SQL acima no SQL Editor');
  console.log('3. Depois teste o login na aplica√ß√£o');
  console.log('\nüîó Dashboard: https://supabase.com/dashboard/project/shzbgjooydruspqajjkf');
}

main().catch(console.error);
