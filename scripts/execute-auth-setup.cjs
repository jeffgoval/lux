/**
 * üöÄ EXECUTAR SETUP COMPLETO DO SISTEMA DE AUTENTICA√á√ÉO V2
 * 
 * Este script executa o SQL diretamente via Supabase client
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function executeAuthSetup() {
  console.log('üöÄ EXECUTANDO SETUP COMPLETO DO SISTEMA DE AUTENTICA√á√ÉO V2\n');

  try {
    // ========================================================================
    // 1. REMOVER TRIGGER E FUN√á√ÉO EXISTENTES
    // ========================================================================
    console.log('üßπ 1. Removendo trigger e fun√ß√£o existentes...');
    
    const cleanupSQL = `
      DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
      DROP FUNCTION IF EXISTS public.handle_new_user();
    `;

    const { error: cleanupError } = await supabase.rpc('exec_sql', { 
      sql_query: cleanupSQL 
    });

    if (cleanupError && !cleanupError.message.includes('does not exist')) {
      console.log('‚ö†Ô∏è Aviso na limpeza:', cleanupError.message);
    } else {
      console.log('‚úÖ Limpeza conclu√≠da');
    }

    // ========================================================================
    // 2. RECRIAR TABELA PROFILES
    // ========================================================================
    console.log('\nüìã 2. Recriando tabela profiles...');
    
    const profilesSQL = `
      DROP TABLE IF EXISTS public.profiles CASCADE;
      
      CREATE TABLE public.profiles (
        id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
        email TEXT NOT NULL,
        nome_completo TEXT DEFAULT 'Usu√°rio',
        telefone TEXT,
        avatar_url TEXT,
        cpf TEXT,
        data_nascimento DATE,
        endereco JSONB,
        ativo BOOLEAN NOT NULL DEFAULT true,
        primeiro_acesso BOOLEAN NOT NULL DEFAULT true,
        configuracoes_usuario JSONB DEFAULT '{}'::jsonb,
        criado_em TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
        atualizado_em TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
      );
    `;

    const { error: profilesError } = await supabase.rpc('exec_sql', { 
      sql_query: profilesSQL 
    });

    if (profilesError) {
      console.error('‚ùå Erro ao criar tabela profiles:', profilesError.message);
      return;
    }

    console.log('‚úÖ Tabela profiles criada');

    // ========================================================================
    // 3. CRIAR ENUM E TABELA USER_ROLES
    // ========================================================================
    console.log('\nüé≠ 3. Criando enum e tabela user_roles...');
    
    const rolesSQL = `
      DO $$ BEGIN
          CREATE TYPE user_role_type AS ENUM (
              'super_admin',
              'proprietaria', 
              'gerente',
              'profissionais',
              'recepcionistas',
              'visitante',
              'cliente'
          );
      EXCEPTION
          WHEN duplicate_object THEN null;
      END $$;

      DROP TABLE IF EXISTS public.user_roles CASCADE;

      CREATE TABLE public.user_roles (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
        role user_role_type NOT NULL DEFAULT 'proprietaria',
        clinica_id UUID,
        ativo BOOLEAN NOT NULL DEFAULT true,
        criado_em TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
        criado_por UUID REFERENCES auth.users(id),
        
        UNIQUE(user_id, role, clinica_id)
      );
    `;

    const { error: rolesError } = await supabase.rpc('exec_sql', { 
      sql_query: rolesSQL 
    });

    if (rolesError) {
      console.error('‚ùå Erro ao criar tabela user_roles:', rolesError.message);
      return;
    }

    console.log('‚úÖ Enum e tabela user_roles criados');

    // ========================================================================
    // 4. CRIAR FUN√á√ÉO DE TRIGGER
    // ========================================================================
    console.log('\n‚öôÔ∏è 4. Criando fun√ß√£o de trigger...');
    
    const functionSQL = `
      CREATE OR REPLACE FUNCTION public.handle_new_user()
      RETURNS TRIGGER AS $$
      BEGIN
        -- 1. Criar perfil automaticamente
        INSERT INTO public.profiles (
          id, 
          email, 
          nome_completo,
          primeiro_acesso,
          ativo,
          criado_em
        ) VALUES (
          NEW.id,
          NEW.email,
          COALESCE(
            NEW.raw_user_meta_data->>'nome_completo',
            NEW.raw_user_meta_data->>'full_name',
            split_part(NEW.email, '@', 1),
            'Usu√°rio'
          ),
          true,
          true,
          now()
        )
        ON CONFLICT (id) DO UPDATE SET
          email = NEW.email,
          atualizado_em = now();

        -- 2. Criar role padr√£o de propriet√°ria
        INSERT INTO public.user_roles (
          user_id, 
          role, 
          ativo, 
          criado_por,
          criado_em
        ) VALUES (
          NEW.id,
          'proprietaria',
          true,
          NEW.id,
          now()
        )
        ON CONFLICT (user_id, role, clinica_id) DO NOTHING;

        RETURN NEW;
      EXCEPTION
        WHEN OTHERS THEN
          RAISE WARNING 'Erro ao criar perfil/role para usu√°rio %: %', NEW.id, SQLERRM;
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql SECURITY DEFINER;
    `;

    const { error: functionError } = await supabase.rpc('exec_sql', { 
      sql_query: functionSQL 
    });

    if (functionError) {
      console.error('‚ùå Erro ao criar fun√ß√£o:', functionError.message);
      return;
    }

    console.log('‚úÖ Fun√ß√£o de trigger criada');

    // ========================================================================
    // 5. CRIAR TRIGGER
    // ========================================================================
    console.log('\nüîó 5. Criando trigger...');
    
    const triggerSQL = `
      CREATE TRIGGER on_auth_user_created
        AFTER INSERT ON auth.users
        FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();
    `;

    const { error: triggerError } = await supabase.rpc('exec_sql', { 
      sql_query: triggerSQL 
    });

    if (triggerError) {
      console.error('‚ùå Erro ao criar trigger:', triggerError.message);
      return;
    }

    console.log('‚úÖ Trigger criado');

    // ========================================================================
    // 6. HABILITAR RLS E CRIAR POL√çTICAS
    // ========================================================================
    console.log('\nüîí 6. Configurando RLS e pol√≠ticas...');
    
    const rlsSQL = `
      -- Habilitar RLS
      ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
      ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

      -- Pol√≠ticas para profiles
      CREATE POLICY "Users can view own profile" ON public.profiles
        FOR SELECT USING (auth.uid() = id);

      CREATE POLICY "Users can update own profile" ON public.profiles
        FOR UPDATE USING (auth.uid() = id);

      CREATE POLICY "Users can insert own profile" ON public.profiles
        FOR INSERT WITH CHECK (auth.uid() = id);

      -- Pol√≠ticas para user_roles
      CREATE POLICY "Users can view own roles" ON public.user_roles
        FOR SELECT USING (auth.uid() = user_id);

      CREATE POLICY "Users can insert own roles" ON public.user_roles
        FOR INSERT WITH CHECK (auth.uid() = user_id);
    `;

    const { error: rlsError } = await supabase.rpc('exec_sql', { 
      sql_query: rlsSQL 
    });

    if (rlsError) {
      console.error('‚ùå Erro ao configurar RLS:', rlsError.message);
      return;
    }

    console.log('‚úÖ RLS e pol√≠ticas configurados');

    // ========================================================================
    // 7. CRIAR FUN√á√ÉO DE UPDATE TIMESTAMP
    // ========================================================================
    console.log('\n‚è∞ 7. Criando fun√ß√£o de update timestamp...');
    
    const timestampSQL = `
      CREATE OR REPLACE FUNCTION public.update_updated_at_column()
      RETURNS TRIGGER AS $$
      BEGIN
          NEW.atualizado_em = now();
          RETURN NEW;
      END;
      $$ LANGUAGE plpgsql;

      CREATE TRIGGER update_profiles_updated_at 
        BEFORE UPDATE ON public.profiles 
        FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
    `;

    const { error: timestampError } = await supabase.rpc('exec_sql', { 
      sql_query: timestampSQL 
    });

    if (timestampError) {
      console.error('‚ùå Erro ao criar fun√ß√£o de timestamp:', timestampError.message);
      return;
    }

    console.log('‚úÖ Fun√ß√£o de timestamp criada');

    // ========================================================================
    // 8. VERIFICA√á√ÉO FINAL
    // ========================================================================
    console.log('\nüîç 8. Verifica√ß√£o final...');
    
    // Verificar tabelas
    const { data: profilesData, error: profilesCheckError } = await supabase
      .from('profiles')
      .select('count', { count: 'exact', head: true });

    const { data: rolesData, error: rolesCheckError } = await supabase
      .from('user_roles')
      .select('count', { count: 'exact', head: true });

    if (profilesCheckError || rolesCheckError) {
      console.error('‚ùå Erro na verifica√ß√£o:', profilesCheckError || rolesCheckError);
      return;
    }

    console.log('‚úÖ Tabelas verificadas:');
    console.log(`   üìã profiles: ${profilesData?.length || 0} registros`);
    console.log(`   üé≠ user_roles: ${rolesData?.length || 0} registros`);

    console.log('\nüéâ SETUP COMPLETO EXECUTADO COM SUCESSO!');
    console.log('\nüìã O que foi criado:');
    console.log('   ‚úÖ Tabela profiles com campos corretos');
    console.log('   ‚úÖ Tabela user_roles com enum de roles');
    console.log('   ‚úÖ Trigger autom√°tico para novos usu√°rios');
    console.log('   ‚úÖ Pol√≠ticas RLS b√°sicas');
    console.log('   ‚úÖ Fun√ß√£o de atualiza√ß√£o de timestamp');
    console.log('\nüéØ Pr√≥ximos passos:');
    console.log('   1. Testar cadastro de novo usu√°rio');
    console.log('   2. Verificar se profile e role s√£o criados automaticamente');
    console.log('   3. Testar fluxo de onboarding');

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }
}

// Executar setup
executeAuthSetup()
  .then(() => {
    console.log('\n‚úÖ SCRIPT FINALIZADO!');
  })
  .catch(console.error);
